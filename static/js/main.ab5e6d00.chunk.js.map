{"version":3,"sources":["App.js","index.js"],"names":["App","arrow","right","bottom","left","top","directionFlow","useState","rowState","setRowState","colState","setColState","axisDirection","setAxisDirection","onClick","className","curRow","curCol","matrix","i","j","arrowSign","style","textAlign","matrixCreate","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sJAGe,SAASA,IACtB,IAAMC,EAAQ,CACZC,MAAO,eACPC,OAAQ,eACRC,KAAM,eACNC,IAAK,gBAEDC,EAAgB,CACpBJ,MAAO,SACPC,OAAQ,OACRC,KAAM,MACNC,IAAK,SAEP,EAAgCE,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0CJ,mBAAS,SAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAqDA,OACE,gCACE,wBAAQC,QAtDO,WACK,UAAlBF,IACW,IAAbJ,EACIK,EAAiBP,EAAcM,IAC/BH,EAAYD,EAAW,IAEP,WAAlBI,IACe,IAAbF,EACFG,EAAiBP,EAAcM,IAE/BD,EAAYD,EAAW,IAGL,SAAlBE,IACe,IAAbJ,EACFK,EAAiBP,EAAcM,IAE/BH,EAAYD,EAAW,IAGL,QAAlBI,IACe,IAAbF,EACFG,EAAiBP,EAAcM,IAE/BD,EAAYD,EAAW,KA8BzB,0BACA,wBAAQI,QA3BO,WACjBD,EAAiBP,EAAcM,KA0B7B,yBACA,qBAAKG,UAAU,OAAf,SAzBiB,SAACC,EAAQC,GAE5B,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3BD,EAAOC,GAAK,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EACFL,IAAWG,GAAKF,IAAWG,EAAInB,EAAMW,GAAiB,GACxDM,EAAOC,GAAGC,GACR,qBACEE,MAAO,CACLC,UAAW,UAEbR,UAAU,MAJZ,SAMGM,KAKT,OAAOH,EAMkBM,CAAad,EAAUF,QCtEpD,IAAMiB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC7B,EAAD,MAEFyB,I","file":"static/js/main.ab5e6d00.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\n\nexport default function App() {\n  const arrow = {\n    right: \"ðŸ‘‰\",\n    bottom: \"ðŸ‘‡\",\n    left: \"ðŸ‘ˆ\",\n    top: \"ðŸ‘†\"\n  };\n  const directionFlow = {\n    right: \"bottom\",\n    bottom: \"left\",\n    left: \"top\",\n    top: \"right\"\n  };\n  const [rowState, setRowState] = useState(0);\n  const [colState, setColState] = useState(0);\n  const [axisDirection, setAxisDirection] = useState(\"right\");\n  const handleMove = () => {\n    if (axisDirection === \"right\") {\n      rowState === 9\n        ? setAxisDirection(directionFlow[axisDirection])\n        : setRowState(rowState + 1);\n    }\n    if (axisDirection === \"bottom\") {\n      if (colState === 9) {\n        setAxisDirection(directionFlow[axisDirection]);\n      } else {\n        setColState(colState + 1);\n      }\n    }\n    if (axisDirection === \"left\") {\n      if (rowState === 0) {\n        setAxisDirection(directionFlow[axisDirection]);\n      } else {\n        setRowState(rowState - 1);\n      }\n    }\n    if (axisDirection === \"top\") {\n      if (colState === 0) {\n        setAxisDirection(directionFlow[axisDirection]);\n      } else {\n        setColState(colState - 1);\n      }\n    }\n  };\n  const handleTurn = () => {\n    setAxisDirection(directionFlow[axisDirection]);\n  };\n  const matrixCreate = (curRow, curCol) => {\n    let matrix = [];\n    for (let i = 0; i < 10; i++) {\n      matrix[i] = [];\n      for (let j = 0; j < 10; j++) {\n        let arrowSign =\n          curRow === i && curCol === j ? arrow[axisDirection] : \"\";\n        matrix[i][j] = (\n          <div\n            style={{\n              textAlign: \"center\"\n            }}\n            className=\"box\"\n          >\n            {arrowSign}\n          </div>\n        );\n      }\n    }\n    return matrix;\n  };\n  return (\n    <div>\n      <button onClick={handleMove}>Move Forward</button>\n      <button onClick={handleTurn}>Turn Around</button>\n      <div className=\"grid\">{matrixCreate(colState, rowState)}</div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}